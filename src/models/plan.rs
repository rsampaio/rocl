/*
 * Open Service Broker API
 *
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * The version of the OpenAPI document: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Plan {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description")]
    pub description: String,
    /// See [Service Metadata Conventions](https://github.com/openservicebrokerapi/servicebroker/blob/master/profile.md#service-metadata) for more details.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
    #[serde(rename = "maintenance_info", skip_serializing_if = "Option::is_none")]
    pub maintenance_info: Option<Box<crate::models::MaintenanceInfo>>,
    #[serde(rename = "free", skip_serializing_if = "Option::is_none")]
    pub free: Option<bool>,
    #[serde(rename = "bindable", skip_serializing_if = "Option::is_none")]
    pub bindable: Option<bool>,
    #[serde(rename = "schemas", skip_serializing_if = "Option::is_none")]
    pub schemas: Option<Box<crate::models::Schemas>>,
}

impl Plan {
    pub fn new(id: String, name: String, description: String) -> Plan {
        Plan {
            id,
            name,
            description,
            metadata: None,
            maintenance_info: None,
            free: None,
            bindable: None,
            schemas: None,
        }
    }
}


